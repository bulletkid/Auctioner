package com.manuanand.auctioner;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private ItemRepository itemRepository;

	@Autowired
	private BidRepository bidRepository;

	///
	// User Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody User addUser (
			@RequestParam String name, @RequestParam Double credit,
			@RequestParam String email, @RequestParam String password) {

		User newUser = new User();
		newUser.setName(name);
		newUser.setEmail(email);
		newUser.setPassword(password);
		newUser.setCredit(credit);
		
		userRepository.save(newUser);
		
		return newUser;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<User> getAllUsers() {
		
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody User getSpecificUser(@PathVariable String id) {
		
		Integer userId = null;
		try {
			userId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<User> user = userRepository.findById(userId);
		if (!user.isEmpty()) {
			return user.get();
		} 

		return null;
	}
	
	@PostMapping(path="/sell") // Map ONLY POST Requests
	public @ResponseBody Item sellItem (
			@RequestParam Integer userId, @RequestParam String password,
			@RequestParam String title, 
			@RequestParam String description, 
			@RequestParam double startingPrice,
			@RequestParam double outrightBuyPrice) {

		// Validate user ID
		Optional<User> user = userRepository.findById(userId);
		if (user.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + userId + " not found");
		} else if (!user.get().getPassword().equals(password))  {
			throw new ResponseStatusException(
					  HttpStatus.INTERNAL_SERVER_ERROR, "Password mismatched for User ID" + userId);
		}
		
		Item newItem = new Item();
		newItem.setTitle(title);
		newItem.setDescription(description);
		newItem.setStartingPrice(startingPrice);
		newItem.setOutrightBuyPrice(outrightBuyPrice);
		newItem.setSellerId(userId);
		
		// Derived fields
		newItem.setCurrentWinningUserId(null);
		newItem.setCurrentPrice(startingPrice);
		newItem.setAuctionEndTime(new Date());
		
		Calendar auctionEndDate = Calendar.getInstance();
		auctionEndDate.add(Calendar.WEEK_OF_YEAR,1);
		newItem.setAuctionEndTime(auctionEndDate.getTime());
		
		newItem.setIsActive(true);
		
		itemRepository.save(newItem);
		
		return newItem;
	}
	
	@PostMapping(path="/bid") // Map ONLY POST Requests
	public @ResponseBody Bid bidOnItem (
			@RequestParam Integer userId, @RequestParam String password,
			@RequestParam Integer itemId, 
			@RequestParam double offerPrice) {

		// Validate user ID
		Optional<User> user = userRepository.findById(userId);
		if (user.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + userId + " not found");
		} else if (!user.get().getPassword().equals(password))  {
			throw new ResponseStatusException(
					  HttpStatus.INTERNAL_SERVER_ERROR, "Password mismatched for User ID" + userId);
		}
		
		// Validate itemId and whether the listing is still valid
		Optional<Item> item = itemRepository.findById(itemId);
		if (item.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Item with ID" + itemId + " not found");
		} else if (!item.get().getIsActive()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Listing for Item with ID" + itemId + " is closed");
		} else if (item.get().getAuctionEndTime().before(new Date())) {
			// Update DB
			item.get().setIsActive(false);
			itemRepository.save(item.get());
			
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Listing for Item with ID" + itemId + " is closed");
		}
		
		// Validate that offerPrice is > item's start Price and also greater than item's current price
		if (offerPrice < item.get().getStartingPrice()) {
			throw new ResponseStatusException(
					  HttpStatus.INTERNAL_SERVER_ERROR, 
					  "Offer price " + offerPrice + " is lower than item's starting price " + item.get().getStartingPrice() ); 
		}
		
		if (offerPrice < item.get().getCurrentPrice()) {
			throw new ResponseStatusException(
					  HttpStatus.INTERNAL_SERVER_ERROR, 
					  "Offer price " + offerPrice + " is lower than item's current bid price " + item.get().getCurrentPrice() ); 
		}
		
		// Update item repository
		item.get().setCurrentPrice(offerPrice);
		item.get().setCurrentWinningUserId(userId);
		itemRepository.save(item.get());

		// Create bid
		Bid newBid = new Bid();
		newBid.setBidderId(userId);
		newBid.setBiddingTime(new Date());
		newBid.setBidPrice(offerPrice);
		newBid.setItemId(itemId);
		
		bidRepository.save(newBid);
		
		return newBid;
	}
	
}